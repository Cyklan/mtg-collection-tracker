// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String             @id @default(cuid())
    name             String?
    email            String?            @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    collectionId     String?
    cardId           String?
    cardsInCollection CardInCollection[]
}

model CardInCollection {
    collection User        @relation(fields: [userId], references: [id])
    userId     String
    card       Card        @relation(fields: [cardId], references: [id])
    cardId     String
    cardAdded  DateTime    @default(now())
    quality    CardQuality

    @@id([userId, cardId])
}

model Card {
    id               String             @id @default(cuid())
    name             String
    oracleText       String
    image            String
    rarity           CardRarity
    type             String[]
    colorIdentity    String
    cmc              Int
    CardInCollection CardInCollection[]
}

enum CardQuality {
    MINT
    NEAR_MINT
    EXCELLENT
    GOOD
    LIGHT_PLAYED
    PLAYED
    POOR
}

enum CardRarity {
    COMMON
    UNCOMMON
    RARE
    MYTHIC
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
